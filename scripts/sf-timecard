#!/usr/bin/python3

import dateparser
import sys

from datetime import datetime
from pathlib import Path

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from sftools.argparse import SFObjectArgumentParser


def main():
    epilog = ('The parameter --after defaults to 1 year ago, to avoid matching too many results, '
              'and --larger defaults to 1 (minute) to avoid timecards with no logged time.')
    parser = SFObjectArgumentParser(default_fields=['CaseId__c', 'TotalMinutesStatic__c'],
                                    epilog=epilog)

    parser.add_argument('-n', '--casenumber', action='append',
                        help='Case number (or Case ID)')
    parser.add_argument('-t', '--timecardid', action='append',
                        help='Timecard id')
    parser.add_argument('-m', '--mytimecards', action='store_true',
                        help='Timecards owned by me')
    parser.add_argument('-o', '--owner',
                        help='Timecards owned by owner (name or ID)')

    parser.add_argument('-B', '--before',
                        help='Only timecards with start time <= this date/time')
    parser.add_argument('-A', '--after',
                        default='1 year ago',
                        help='Only timecards with start time >= this date/time (default: 1 year ago)')
    month = parser.add_mutually_exclusive_group()
    month.add_argument('--this-month', action='store_true',
                       help='Only timecards with start time during this calendar month')
    month.add_argument('--last-month', action='store_true',
                       help='Only timecards with start time during last calendar month')
    parser.add_argument('--larger', type=int, default=1,
                        help='Only timecards with minutes >= this (default: 1)')
    parser.add_argument('--smaller', type=int, default=0,
                        help='Only timecards with minutes <= this')

    total = parser.add_mutually_exclusive_group()
    total.add_argument('-T', '--total', action='store_true',
                       help='Print total time in hours and minutes')
    total.add_argument('--total-hours', action='store_true',
                       help='Print total time, rounding down to hours')
    total.add_argument('--total-minutes', action='store_true',
                       help='Print total time in minutes')

    opts = parser.parse_args()
    sf = opts.functions.SF()
    kwargs = opts.query_kwargs

    if opts.this_month or opts.last_month:
        this_month = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        if this_month.month > 1:
            last_month = this_month.replace(month=this_month.month - 1)
        else:
            last_month = this_month.replace(year=this_month.year - 1, month=12)
        if this_month.month < 12:
            next_month = this_month.replace(month=this_month.month + 1)
        else:
            next_month = this_month.replace(year=this_month.year + 1, month=1)

        if opts.this_month:
            kwargs['after'] = this_month
            kwargs['before'] = next_month
        elif opts.last_month:
            if this_month.month > 1:
                last_month = this_month.replace(month=this_month.month - 1)
            else:
                last_month = this_month.replace(year=this_month.year - 1, month=12)
            kwargs['after'] = last_month
            kwargs['before'] = this_month
    else:
        for o in ['before', 'after']:
            value = getattr(opts, o)
            if value:
                kwargs[o] = dateparser.parse(value)
                if opts.verbose:
                    print(f"Parsed '{o}' value '{value}' as '{kwargs[o].isoformat()}'")

    for o in ['larger', 'smaller']:
        value = getattr(opts, o)
        if value:
            kwargs[o] = value

    if opts.verbose:
        start = kwargs.get('after')
        end = kwargs.get('before')
        if start and end:
            print(f"Date range: '{start}' to '{end}'")
        elif start:
            print(f"Date range: after '{start}'")
        elif end:
            print(f"Date range: before '{end}'")
        minsize = kwargs.get('larger')
        maxsize = kwargs.get('smaller')
        if minsize and maxsize:
            print(f'Size range: {minsize} to {maxsize}')
        elif minsize:
            print(f'Size range: >= {minsize}')
        elif maxsize:
            print(f'Size range: <= {maxsize}')

    timecards = []
    if opts.casenumber:
        for n in opts.casenumber:
            case = sf.Case(n)
            if case:
                timecards.extend(case.timecards(**kwargs))

    if opts.timecardid:
        for i in opts.timecardid:
            timecard = sf.TimeCard__c(i)
            if timecard:
                timecards.append(timecard)

    if opts.mytimecards:
        timecards.extend(sf.me.timecards(**kwargs))

    if opts.owner:
        for o in opts.owner:
            owner = sf.User(o)
            if owner:
                timecards.extend(owner.timecards(**kwargs))

    if any((opts.total, opts.total_hours, opts.total_minutes)):
        total_time = sum([int(tc.TotalMinutesStatic__c) for tc in timecards])
        hours = total_time // 60
        minutes = total_time % 60
        if opts.total:
            print(f'Total time: {hours} hours {minutes} minutes')
        elif opts.total_hours:
            print(f'Total time: {hours} hours')
        elif opts.total_minutes:
            print(f'Total time: {total_time} minutes')
    else:
        opts.functions.dumpfields(timecards)


if __name__ == "__main__":
    main()
