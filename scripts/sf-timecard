#!/usr/bin/python3

import dateparser
import sys

from pathlib import Path

# if called from git source, add parent dir to python path
if Path(__file__).parent.name == 'scripts':
    sys.path.insert(0, str(Path(__file__).parent.parent))

from sftools.argparse import SFObjectArgumentParser


def main():
    epilog = ('The parameter --after defaults to 1 year ago, to avoid matching too many results, '
              'and --larger defaults to 1 (minute) to avoid timecards with no logged time.')
    parser = SFObjectArgumentParser(default_fields=['CaseId__c', 'TotalMinutesStatic__c'],
                                    epilog=epilog)

    parser.add_argument('-n', '--casenumber', action='append',
                        help='Case number (or Case ID)')
    parser.add_argument('-t', '--timecardid', action='append',
                        help='Timecard id')
    parser.add_argument('-m', '--mytimecards', action='store_true',
                        help='Timecards owned by me')
    parser.add_argument('-o', '--owner',
                        help='Timecards owned by owner (name or ID)')

    parser.add_argument('-B', '--before',
                        help='Only timecards with start time <= this date/time')
    parser.add_argument('-A', '--after',
                        default='1 year ago',
                        help='Only timecards with start time >= this date/time (default: 1 year ago)')
    parser.add_argument('--last-month',
                        help='Only timecards with start time during last calendar month')
    parser.add_argument('--this-month',
                        help='Only timecards with start time during this calendar month')
    parser.add_argument('--larger', type=int, default=1,
                        help='Only timecards with minutes >= this (default: 1)')
    parser.add_argument('--smaller', type=int, default=0,
                        help='Only timecards with minutes <= this')

    opts = parser.parse_args()
    sf = opts.SF()

    kwargs = opts.query_kwargs
    for o in ['before', 'after']:
        value = getattr(opts, o)
        if value:
            kwargs[o] = dateparser.parse(value)
            if opts.verbose:
                print(f"Parsed '{o}' value '{value}' as '{kwargs[o].isoformat()}'")
    for o in ['larger', 'smaller']:
        value = getattr(opts, o)
        if value:
            kwargs[o] = value

    timecards = []
    if opts.casenumber:
        for n in opts.casenumber:
            case = sf.Case(n)
            if case:
                timecards.extend(case.timecards(**kwargs))

    if opts.timecardid:
        for i in opts.timecardid:
            timecard = sf.TimeCard__c(i)
            if timecard:
                timecards.append(timecard)

    if opts.mytimecards:
        timecards.extend(sf.me.timecards(**kwargs))

    if opts.owner:
        for o in opts.owner:
            owner = sf.User(o)
            if owner:
                timecards.extend(owner.timecards(**kwargs))

    parser.dumpfields(opts, timecards)


if __name__ == "__main__":
    main()
